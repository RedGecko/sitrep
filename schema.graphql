type Incident {
    id: ID!
    name: String!
    location: Location!
    parent: Incident
    creator: User!
    organisation: Organisation!
    createdAt: Timestamp!
    updatedAt: Timestamp!
    deletedAt: Timestamp
    startedAt: Timestamp!
    closedAt: Timestamp
    journal: [Journal]
}

type User {
    id: ID!
    name: String!
    email: String!
}

type Organisation {
    name: String!
    id: ID!
}

type Location {
    name: String!
    coordinates: Coordinates
}

type Coordinates {
     lat: Float!
     long: Float!
}

type Journal {
    id: ID!
    incident: Incident!
    createdAt: Timestamp!
    updatedAt: Timestamp!
    deletedAt: Timestamp
    startedAt: Timestamp!
    closedAt: Timestamp
    journalMessages: [JournalMessage]
}

type JournalMessage {
    id: ID!
    type: MessageType! 
    createdAt: Timestamp!
    updatedAt: Timestamp!
    deletedAt: Timestamp

    journal: Journal!
    sender: String!
    receiver: String!
    timestamp: Timestamp!
    message: String!

    status: MessageStatus!
    priority: MessagePriority!
}

enum MessageStatus {
    NEW
    TRIAGED
}

enum MessagePriority {
    NORMAL
    IMPORTANT
    CRITICAL
}

enum MessageType {
    REPORT
    COMMUNICATION
}

input inputLocation {
    name: String!
    lat: Float
    long: Float
}

input inputIncident {
    name: String!
    location: inputLocation!
    organisation: ID
    startedAt: Timestamp!
    parent: ID 
}

input newJournal {
    incident: ID!
    name: String!
    startedAt: Timestamp!
}

input newJournalMessage {
    journal: ID!
    sender: String!
    receiver: String!
    type: MessageType = COMMUNICATION
    message: String!
    status: MessageStatus = NEW
    priority: MessagePriority = NORMAL
}

type Mutation {
    createIncident(incident: inputIncident!): Incident!
    updateIncident(id: ID!, incident: inputIncident!): Incident!
    closeIncident(id: ID!): Incident!
    deleteIncident(id: ID!): Incident!

    createJournalMessage(message: newJournalMessage!): JournalMessage!
    updateJournalMessage(message: newJournalMessage!): JournalMessage!

    createJournal(journal: newJournal!): Journal!
    updateJournal(journal: newJournal!): Journal
    closeJournal(journal: ID!): Journal!
}

type Query {
    Incidents(limit: Int = 25, Offset: Int = 0): [Incident!]!
    Journals(limit: Int = 25, Offset: Int = 0): [Journal!]!
    JournalMessages(journal: ID!, limit: Int = 50, Offset: Int = 0): [JournalMessage!]!
}

type Subscription {
    journalMessageUpdate(journal: ID!): JournalMessage!
}

scalar Timestamp