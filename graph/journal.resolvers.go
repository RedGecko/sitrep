package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"time"

	"github.com/f-eld-ch/sitrep/graph/model"
	"github.com/google/uuid"
)

// ID is the resolver for the id field.
func (r *journalResolver) ID(ctx context.Context, obj *model.Journal) (string, error) {
	return obj.ID.String(), nil
}

// ClosedAt is the resolver for the closedAt field.
func (r *journalResolver) ClosedAt(ctx context.Context, obj *model.Journal) (*string, error) {
	if obj.ClosedAt.IsZero() {
		return nil, nil
	}
	t := obj.ClosedAt.UTC().Format(time.RFC3339)
	return &t, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *journalResolver) CreatedAt(ctx context.Context, obj *model.Journal) (string, error) {
	return obj.CreatedAt.UTC().Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *journalResolver) UpdatedAt(ctx context.Context, obj *model.Journal) (string, error) {
	return obj.UpdatedAt.UTC().Format(time.RFC3339), nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *journalResolver) DeletedAt(ctx context.Context, obj *model.Journal) (*string, error) {
	if obj.DeletedAt.IsZero() {
		return nil, nil
	}
	t := obj.DeletedAt.UTC().Format(time.RFC3339)
	return &t, nil
}

// Messages is the resolver for the messages field.
func (r *journalResolver) Messages(ctx context.Context, obj *model.Journal) ([]model.Message, error) {
	panic(fmt.Errorf("not implemented: Messages - messages"))
}

// Journals is the resolver for the journals field.
func (r *queryResolver) Journals(ctx context.Context, incidentID string) ([]model.Journal, error) {
	// TODO(daa): fixme
	return []model.Journal{
		{
			ID:        uuid.MustParse("26fdef2b-05f4-4d96-9752-ef7f54a5cdaa"),
			Name:      "Test",
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
		},
	}, nil
}

// Journal returns JournalResolver implementation.
func (r *Resolver) Journal() JournalResolver { return &journalResolver{r} }

type journalResolver struct{ *Resolver }
