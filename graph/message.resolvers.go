package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"time"

	"github.com/f-eld-ch/sitrep/graph/model"
)

// ID is the resolver for the id field.
func (r *messageResolver) ID(ctx context.Context, obj *model.Message) (string, error) {
	return obj.ID.String(), nil
}

// ClosedAt is the resolver for the closedAt field.
func (r *messageResolver) ClosedAt(ctx context.Context, obj *model.Message) (*string, error) {
	panic(fmt.Errorf("not implemented: ClosedAt - closedAt"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *messageResolver) CreatedAt(ctx context.Context, obj *model.Message) (string, error) {
	return obj.CreatedAt.UTC().Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *messageResolver) UpdatedAt(ctx context.Context, obj *model.Message) (string, error) {
	return obj.UpdatedAt.UTC().Format(time.RFC3339), nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *messageResolver) DeletedAt(ctx context.Context, obj *model.Message) (*string, error) {
	if obj.DeletedAt.IsZero() {
		return nil, nil
	}
	t := obj.DeletedAt.UTC().Format(time.RFC3339)
	return &t, nil
}

// Time is the resolver for the time field.
func (r *messageResolver) Time(ctx context.Context, obj *model.Message) (string, error) {
	panic(fmt.Errorf("not implemented: Time - time"))
}

// Message returns MessageResolver implementation.
func (r *Resolver) Message() MessageResolver { return &messageResolver{r} }

type messageResolver struct{ *Resolver }
