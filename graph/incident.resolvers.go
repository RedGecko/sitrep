package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"time"

	"github.com/RedGecko/sitrep/graph/model"
	"github.com/google/uuid"
)

// ID is the resolver for the id field.
func (r *incidentResolver) ID(ctx context.Context, obj *model.Incident) (string, error) {
	return obj.ID.String(), nil
}

// ClosedAt is the resolver for the closedAt field.
func (r *incidentResolver) ClosedAt(ctx context.Context, obj *model.Incident) (*string, error) {
	if obj.ClosedAt.IsZero() {
		return nil, nil
	}
	t := obj.ClosedAt.UTC().Format(time.RFC3339)
	return &t, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *incidentResolver) CreatedAt(ctx context.Context, obj *model.Incident) (string, error) {
	return obj.CreatedAt.UTC().Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *incidentResolver) UpdatedAt(ctx context.Context, obj *model.Incident) (string, error) {
	return obj.UpdatedAt.UTC().Format(time.RFC3339), nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *incidentResolver) DeletedAt(ctx context.Context, obj *model.Incident) (*string, error) {
	if obj.DeletedAt.IsZero() {
		return nil, nil
	}
	t := obj.DeletedAt.UTC().Format(time.RFC3339)
	return &t, nil
}

// Divisions is the resolver for the divisions field.
func (r *incidentResolver) Divisions(ctx context.Context, obj *model.Incident) ([]model.Division, error) {
	panic(fmt.Errorf("not implemented: Divisions - divisions"))
}

// Journals is the resolver for the journals field.
func (r *incidentResolver) Journals(ctx context.Context, obj *model.Incident) ([]model.Journal, error) {
	panic(fmt.Errorf("not implemented: Journals - journals"))
}

// ID is the resolver for the id field.
func (r *locationResolver) ID(ctx context.Context, obj *model.Location) (string, error) {
	return obj.ID.String(), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *locationResolver) CreatedAt(ctx context.Context, obj *model.Location) (string, error) {
	return obj.CreatedAt.UTC().Format(time.RFC3339), nil
}

// NewMutation is the resolver for the NewMutation field.
func (r *mutationResolver) NewIncident(ctx context.Context, incident model.NewIncident) (*model.Incident, error) {
	panic(fmt.Errorf("not implemented: NewIncident - NewIncident"))
}

// Incidents is the resolver for the incidents field.
func (r *queryResolver) Incidents(ctx context.Context) ([]model.Incident, error) {
	locID, _ := uuid.NewRandom()
	incidentID, _ := uuid.NewRandom()
	incidentID2, _ := uuid.NewRandom()

	l := model.Location{
		ID:   locID,
		Name: "Erstfeld",
		Coordinates: model.Coordinate{
			Lat:  46.81640839502721,
			Long: 8.647549189098969,
		},
	}
	return []model.Incident{
		{
			ID:        incidentID,
			Name:      "Test",
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
			Location:  l,
		},
		{
			ID:        incidentID2,
			Name:      "Test Closed",
			CreatedAt: time.Now().Add(-5 * time.Hour),
			UpdatedAt: time.Now().Add(-10 * time.Minute),
			ClosedAt:  time.Now().Add(-10 * time.Minute),
			Location:  l,
		},
	}, nil
}

// Incident returns IncidentResolver implementation.
func (r *Resolver) Incident() IncidentResolver { return &incidentResolver{r} }

// Location returns LocationResolver implementation.
func (r *Resolver) Location() LocationResolver { return &locationResolver{r} }

type incidentResolver struct{ *Resolver }
type locationResolver struct{ *Resolver }
